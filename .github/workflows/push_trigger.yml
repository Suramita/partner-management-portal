name: Maven Package upon a push

on:
  push:
    branches:
      - develop
      - 1.*
      - '!release-branch'
      - release-1*

jobs:
  build-pmp-ui:
    runs-on: ubuntu-latest
    env: 
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: pmp-ui
      SERVICE_LOCATION: pmp-ui
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16'  # Specify your Node.js version here

      - name: Clean up old files
        run: |
          rm -rf node_modules
          rm package-lock.json
          npm cache clean --force

      - name: Install dependencies
        run: cd ${{ env.SERVICE_LOCATION }} && npm install --ignore-scripts

      - name: Build project
        run: cd ${{ env.SERVICE_LOCATION }} && npm run build -- --prod --base-href . --output-path=dist

      - name: Setup environment
        run: |
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          cd ${{ env.SERVICE_LOCATION }}
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}

      - name: Log into Docker registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

      - name: Push Docker image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  sonar_analysis:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: pmp-ui
      SERVICE_LOCATION: pmp-ui
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16'  # Specify your Node.js version here

      - name: Clean up old files
        run: |
          rm -rf node_modules
          rm package-lock.json
          npm cache clean --force

      - name: Install dependencies
        run: cd ${{ env.SERVICE_LOCATION }} && npm install --ignore-scripts

      - name: Build project
        run: cd ${{ env.SERVICE_LOCATION }} && npm run build -- --prod --base-href . --output-path=dist

      - name: Configure SonarCloud
        run: |
          cd ${{ env.SERVICE_LOCATION }}
          echo "sonar.host.url=https://sonarcloud.io/" >> sonar-project.properties
          echo "sonar.login=${{ secrets.SONAR_TOKEN }}" >> sonar-project.properties
          echo "sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}" >> sonar-project.properties
          echo "sonar.organization=${{ secrets.SONAR_ORGANIZATION }}" >> sonar-project.properties
          echo "sonar.sourceEncoding=UTF-8" >> sonar-project.properties
          echo "sonar.sources=src" >> sonar-project.properties
          echo "sonar.exclusions=**/node_modules/**" >> sonar-project.properties
          echo "sonar.tests=src" >> sonar-project.properties
          echo "sonar.test.inclusions=**/*.spec.ts" >> sonar-project.properties
          echo "sonar.typescript.lcov.reportPaths=coverage/lcov.info" >> sonar-project.properties

      - name: Install SonarScanner and run analysis
        run: |
          cd ${{ env.SERVICE_LOCATION }}
          npm install sonar-scanner
          npx sonar-scanner

      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,workflow,job
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEVOPS_WEBHOOK }}
        if: failure()
